#include <iostream>
#include <cmath>

using namespace std;

double f(double);
double fp(double);
double bisection(double, double);
double falsia(double, double);
double newton(double);
double sieczne(double, double);

double lagrange(double, double*, double*, int);

double newtonInter(double, double*, double*, int);

double hermite(double, double*, double*, double*, int);

void mediumWideApprox(double*, double*, int, int);

double fx(double x)
{
	return x * x;
}

double monteCarlo(int, double, double);
double trapezMethod(int, double, double);

double trapezFormula(double*, double*, int);
double simpsonFormula(double*, double*, int);

double f(double x)
{
	return 2 * x*x*x*x;
}

double f2(double x, double y)
{
	return x*x + 3 * x*y;
}

double newtonCotesTrapez(double, double, double);
double monteCarlo(int, double, double, double, double);

double f(double x, double y)
{
	return (2 * y) - (3 * x);
	//return (y - (x*x) + 1);
	//return x + y;
	//return (2 * x) - y;
	//return x / y;
}

void forward(double x0, double y0, double delta_x, int n);
double forward(double x, double y, double delta_x);
void rungeKutty(double x0, double y0, double delta_x, int n);
void improvedEuler(double x0, double y0, double delta_x, int n);
void directIteration(double x0, double y0, double delta_x, int n);

void jacob(double** A, double* b, int n, int iter)
{
	double* x1 = new double[n];
	double* x2 = new double[n];
	double* N = new double[n];
	double** M = new double*[n];
	for (int i = 0; i < n; i++)
	{
		M[i] = new double[n];
	}

	for (int i = 0; i < n; i++)
	{
		N[i] = 1 / A[i][i];
	}

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (i == j)
				M[i][j] = 0;
			else
				M[i][j] = -(A[i][j] * N[i]);
		}
	}

	for (int i = 0; i < n; i++)
		x1[i] = 0;

	for (int k = 0; k < iter; k++) 
	{
		for (int i = 0; i < n; i++) 
		{
			x2[i] = N[i] * b[i];

			for (int j = 0; j < n; j++)
			{
				x2[i] += M[i][j] * x1[j];
			}
		}
		for (int i = 0; i < n; i++)
		{
			x1[i] = x2[i];
		}
	}

	for (int i = 0; i < n; i++)
	{
		cout << "x" << i + 1 << "=" << x1[i] << endl;
	}
}




int main() {
	const int n = 4;

	double a[] = { 4, -1, -0.2, 2, -1, 5, 0, -2, 0, -2, -1, 4, 0, -2, -1, 4 };

	double** A = new double*[n];
	for (int i = 0; i < n; i++)
	{
		A[i] = new double[n];
	}

	A[0][0] = 4; A[0][1] = -1; A[0][2] = -0.2; A[0][3] = 2;
	A[1][0] = -1; A[1][1] = 5; A[1][2] = 0; A[1][3] = -2;
	A[2][0] = 0.2; A[2][1] = 1; A[2][2] = 10; A[2][3] = -1;
	A[3][0] = 0; A[3][1] = -2; A[3][2] = -1; A[3][3] = 4;

	/*double A[n][n] = {
		{ 4, -1, -0.2, 2 } ,
		{ -1, 5, 0, -2 } ,
		{ 0, -2, -1, 4 },
		{0, -2, -1, 4}
	};*/

	double b[n] = { 30, 0, -10, 5 };

	jacob(A, b, n, 2);

	//double x[] = { -5, -4, -3, -2, -1, 0, 1, 2, 3, 5 };
	//double fx[] = { -110, -60, -20, -10, -1.5, 2, 7, 18, 50, 170 };
	//double df[5] = { 0,0,0,0,0 };

	//srand(time(NULL));

	///*for (int i = 10; i < 10001; i *= 10)
	//{
	//	cout << 330.6 - monteCarlo(i, 2, 10) << endl;
	//}
	//cout << endl;
	//for (int i = 10; i < 10001; i *= 10)
	//{
	//	cout << 330.6 - trapezMethod(i, 2, 10) << endl;
	//}*/

	///*cout << monteCarlo(10000, 2, 10) << endl;

	//cout << trapezFormula(x, fx, 9) << endl;
	//cout << simpsonFormula(x, fx, 9) << endl;*/

	//cout << "forward" << endl;
	//forward(0.0, 1.0, 1.0, 3);

	////______________________________________________

	//cout << "forward" << endl;
	//double delta_x = 1.0;
	//double y = 1.0;
	//for (double x = 0.0; x < 5.0; x += delta_x)
	//{
	//	double next_y = forward(x, y, delta_x);
	//	cout << "x = " << x << "\t y = " << next_y << endl;
	//	y = next_y;
	//}

	////______________________________________________

	//cout << "runge" << endl;
	//rungeKutty(0.0, 0.0, 0.2, 5);

	////______________________________________________

	//cout << "improvEuler" << endl;
	//improvedEuler(0.0, 1.0, 0.1, 2);

	////______________________________________________

	//cout << "dirIter" << endl;
	//directIteration(0.0, 1.0, 1.0, 3);

	system("pause");
	return 0;
}

double f(double x) {
	return 2 * pow(x, 2) + 3 * x - 4;
}

double fp(double x) {
	return 4 * x + 3;
}

double bisection(double a, double b) {
	double x1, epsilon = 0.1, residuum = 0.1;

	while (abs(a - b) > epsilon) {
		x1 = (a + b) / 2;

		if (f(x1) <= residuum)
			break;
		else if (f(x1) * f(a) < 0)
			b = x1;
		else
			a = x1;
	}

	return (a + b) / 2;
}

double falsia(double a, double b) {
	double epsilon = 0.1, residuum = 0.1, fa = f(a), fb = f(b), x1 = a, x0 = b, f0;

	/*if (fa * fb > 0) {
	cout << "error" << endl;
	return 0;
	}*/

	while (abs(x1 - x0) > epsilon) {
		x1 = x0;
		x0 = a - fa * (b - a) / (fb - fa);
		f0 = f(x0);
		if (abs(f0) < residuum)
			break;
		else if (fa * f0 < 0) {
			b = x0;
			fb = f0;
		}
		else {
			a = x0;
			fa = f0;
		}
	}

	return x0;
}

double newton(double x0) {
	double epsilon = 0.1, residuum = 0.1, x1 = x0 - 1, f0 = f(x0), f1;
	int i = 64;

	while (/*i &&*/ abs(x1 - x0) > epsilon && abs(f0) > residuum) {
		f1 = fp(x0);
		/*if (abs(f1) < residuum) {
		cout << "error" << endl;
		return 0;
		}*/

		x1 = x0;
		x0 = x0 - f0 / f1;
		f0 = f(x0);
	}

	return x0;
}

double sieczne(double x1, double x2) {
	double epsilon = 0.1, residuum = 0.1, f1 = f(x1), f2 = f(x2), x0, f0;

	while (abs(x1 - x2) > epsilon) {
		x0 = x1 - f1 * (x1 - x2) / (f1 - f2);
		f0 = f(x0);
		if (abs(f0) < residuum) break;
		x2 = x1;
		f2 = f1;
		x1 = x0;
		f1 = f0;
	}

	return x0;
}


double lagrange(double X, double* x, double* fx, int n)
{
	double ret = 0;

	for (int i = 0; i < n; i++)
	{
		double factor = 1;

		for (int j = 0; j < n; j++)
		{
			if (j != i)
			{
				factor *= (X - x[j]) / (x[i] - x[j]);
			}
		}

		ret += fx[i] * factor;
	}

	return ret;
}

double newtonInter(double X, double* x, double* fx, int n)
{
	double ret = 0, factor;
	int i, j;

	for (i = 0; i < n - 1; i++)
	{
		for (j = n - 1; j > i; j--)
		{
			fx[j] = (fx[j] - fx[j - 1]) / (x[j] - x[j - i - 1]);
		}
	}

	for (i = n - 1; i >= 0; i--)
	{
		factor = 1;

		for (j = 0; j < i; j++)
		{
			factor *= (X - x[j]);
		}

		factor *= fx[j];
		ret += factor;
	}

	return ret;
}

double hermite(double X, double* t_x, double* t_fx, double* t_df, int n)
{
	double* x = new double[n];
	double* fx = new double[n];
	double* df = new double[n];
	for (int i = 0; i < n; i++)
	{
		x[i] = t_x[i];
		fx[i] = t_fx[i];
		df[i] = t_df[i];
	}


	for (int i = 1; i < n; i++)
	{
		if (x[i] == x[i - 1])
			df[i] = df[i - 1] + 1;
		else
			df[i] = 0;
	}

	for (int i = 1; i < n; i++)
	{
		for (int j = n - 1; j >= i; j--)
		{
			if (df[j] == 0)
				fx[j] = (fx[j] - fx[((int)(j - 1 - df[j - 1]))]) / (x[j] - x[j - i]);
			else
			{
				fx[j] /= (double)i;
				df[j]--;
			}
		}
	}

	for (int j = n - 1; j >= 0; j--)
	{
		for (int i = j; i < n - 1; i++)
		{
			fx[i] = fx[i] - fx[i + 1] * x[j];
		}
	}

	/*cout << "W(x) = ";
	for (int i = 0; i < n; i++)
	{
	if (i == 0)
	cout << fx[i];
	else if (i == 1)
	cout << fx[i] << 'x';
	else
	cout << fx[i] << "x^" << i;
	if (i != n - 1)
	cout << " + ";
	}*/

	double ret = 0;

	for (int i = 0; i < n; i++)
	{
		ret += fx[i] * pow(X, i);
	}

	return ret;
}

void mediumWideApprox(double* x, double* fx, int n, int step)
{
	double factor;
	double* factorBufor = new double[step + 1];

	int k = 0;
	for (k = 0; k < step + 1; k++)
	{
		factor = 0;
		for (int i = 0; i < n; i++)
		{
			factor += pow(x[i], 0) * pow(x[i], k);
		}
		cout << factor << "a" << k << "+";
		factorBufor[k] = factor;
	}
	double result = 0;
	for (int i = 0; i < n; i++)
	{
		result += pow(x[i], 0) * fx[i];
	}
	cout << "=" << result << endl;

	for (int j = 1; j < step + 1; j++)
	{
		for (k = 0; k < step; k++)
		{
			factorBufor[k] = factorBufor[k+1];
			cout << factorBufor[k] << "a" << k << "+";
		}

		factor = 0;
		for (int i = 0; i < n; i++)
		{
			factor += pow(x[i], j) * pow(x[i], k);
		}
		cout << factor << "a" << k << "+";
		factorBufor[step] = factor;

		result = 0;
		for (int i = 0; i < n; i++)
		{
			result += pow(x[i], j) * fx[i];
		}
		cout << "=" << result << endl;
	}
}

double monteCarlo(int n, double xp, double xk)
{
	double factor = 0;
	double dx = xk - xp;
	srand(time(NULL));

	for (int i = 0; i < n; i++)
	{
		double x = xp + (rand()/double(RAND_MAX) * (dx));
		factor += fx(x);
	}

	/*int i = 0;
	while (i < n)
	{
		double x = (rand() % 15);

		if (x <= 10 && x >= 2)
		{
			factor += fx(x) / n;
			i++;
		}
	}*/

	return factor * dx / n;
}

double trapezMethod(int n, double xp, double xk)
{
	double s = 0;
	double dx = (xk - xp) / n;

	for (int i = 1; i < n; i++)
	{
		//s += (fx(i) + fx(i + dx)) / 2 * dx;
		s += fx(xp + i * dx);
	}
	s = (s + (fx(xp) + fx(xk)) / 2)*dx;

	return s;
}

double trapezFormula(double* x, double* fx, int n)
{
	double h = (x[n - 1] - x[0]) / (n - 1);
	double area = 0.0;
	area += fx[0] + fx[n - 1];
	
	for (int i = 1; i < n - 1; i++) 
	{
		area += 2 * fx[i];
	}

	return ((area * h) / 2.0);
}

double simpsonFormula(double* x, double* fx, int n)
{
	if (n <= 2) return 0;

	double h = (x[n - 1] - x[0]) / (n - 1);
	double area = 0.0;
	double area2 = 0.0;

	if (n % 2 == 0) 
	{	
		area2 += fx[n - 4] + 3 * fx[n - 3] + 3 * fx[n - 2] + fx[n - 1];
		n -= 3;
	}

	area += fx[0] + fx[n - 1];
	for (int i = 1; i < n - 1; i += 2) 
	{
		area += 4 * fx[i];
	}

	for (int i = 2; i < n - 2; i += 2) 
	{
		area += 2 * fx[i];
	}

	return ((area * h) / 3) + ((area2 * h * 3) / 8);
}

double newtonCotesTrapez(double a, double b, double n)
{
	double step = (b - a) / n;
	double integral = 0.0;

	for (double i = a; i <= b - step; i += step)
	{
		integral += (step / 2.0)*(f(i) + f(i + step));
	}

	return integral;
}

double monteCarlo(int n, double xp, double xk, double yp, double yk)
{
	double factor = 0;
	double dx = xk - xp;
	double dy = yk - yp;

	srand(time(NULL));

	for (int i = 0; i < n; i++)
	{
		double x = xp + (rand() / double(RAND_MAX) * (dx));
		double y = yp + (rand() / double(RAND_MAX) * (dy));
		factor += f2(x, y);
	}

	return factor * dx * dy / n;
}

void forward(double x0, double y0, double delta_x, int n)
{
	//n - ilosc powtorzen, delta_x - krok
	//ogolnie to (xkocowe - xpoczatkowe)/krok = liczba powtrze, jakby zadanie bylo
	//ze podany jest przedzial a nie n

	double prev_x = x0;
	double prev_y = y0;
	double y;

	for (int i = 0; i < n; i++)
	{
		y = prev_y + delta_x * (f(prev_x, prev_y));

		cout << "x" << i + 1 << " = " << prev_x + delta_x;
		cout << "\t y" << i + 1 << " = " << y << endl;

		prev_x += delta_x;
		prev_y = y;

	}

}

double forward(double x, double y, double delta_x)
{
	return y + delta_x * (f(x, y));
}

void rungeKutty(double x0, double y0, double delta_x, int n)
{
	double prev_x = x0;
	double prev_y = y0;
	double y;

	for (int i = 0; i < n; i++)
	{
		double k1 = delta_x * f(prev_x, prev_y);
		double k2 = delta_x * f(prev_x + (delta_x / 2.0), prev_y + (k1 / 2.0));
		double k3 = delta_x * f(prev_x + (delta_x / 2), prev_y + (k2 / 2));
		double k4 = delta_x * f(prev_x + delta_x, prev_y + k3);

		y = prev_y + (k1 + 2 * k2 + 2 * k3 + k4) / 6.0;

		cout << "x" << i + 1 << " = " << prev_x + delta_x;
		cout << " y" << i + 1 << " = " << y << endl;

		prev_x += delta_x;
		prev_y = y;
	}
}

void improvedEuler(double x0, double y0, double delta_x, int n)
{
	double prev_x = x0;
	double prev_y = y0;
	double y;

	for (int i = 0; i < n; i++)
	{
		double yf = prev_y + delta_x * f(prev_x, prev_y);
		double yb = prev_y + delta_x * f(prev_x + delta_x, yf);

		y = (yf + yb) / 2.0;

		cout << "x" << i + 1 << " = " << prev_x + delta_x;
		cout << " y" << i + 1 << " = " << y << endl;

		prev_x += delta_x;
		prev_y = y;
	}
}


void directIteration(double x0, double y0, double delta_x, int n)
{
	double prev_x = x0;
	double prev_y = y0;
	double y;

	for (int i = 0; i < n; i++)
	{
		//predyktor
		double yp = prev_y + delta_x * f(prev_x + delta_x, prev_y);

		//korektor
		y = prev_y + delta_x * f(prev_x + delta_x, yp);

		cout << "x" << i + 1 << " = " << prev_x + delta_x;
		cout << " y" << i + 1 << " = " << y << endl;

		prev_x += delta_x;
		prev_y = y;
	}

}
